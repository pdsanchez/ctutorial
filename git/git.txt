Git is un sistema de control de revisiones distribuido y descentralizado. Esto quiere decir que hay múltiples versiones del repositorio, pero todas con un “origen” común, al que llamaremos origin (no es un repositorio central ya que al ser distribuido, a nivel técnico no existe)
Cada desarrollador baja y sube al mismo origin, pero también puede coger cambios de otros compañeros para realizar trabajos colaborativos.
Cada repositorio puede tener muchas ramas distintas, que más adelante se podrán unir (merge) a otras ramas. Git siempre mantiene registro de todos estos cambios.

Ramas
Existen muchos modelos de organización de git, pero el más básico es el que se compone de dos ramas en origin: master y desarrollo.
La rama origin/master es la principal, con el código de producción.
La rama origin/desarrollo es donde está la versión en la que se trabaja.
Cuando la rama de desarrollo alcanza una versión estable y está lista para su distribución, todos los cambios se unen a la rama de master.

Instalación y configuración
Linux (Debian / Ubuntu): $ apt-get install git
Windows y Otros: htps://git-scm.com/download/

Setup inicial
Una vez está instalado hay que establecer una confguración mínima: un usuario y un correo electrónico.
$ git config --global user.name "Your Name"
$ git config --global user.email your_email@example.com
$ git config --global push.default matching (git hace push de los cambios desde todas las ramas locales a las ramas remotas con el mismo nombre)
$ git config --global push.default simple (git hace push de los cambios desde la rama actual a la rama remota que tiene el mismo nombre) PREFERIBLE
$ git config --list

Fichero que contiene la configuración global de git (.gitconfig en el home):
$ cat ~/.gitconfig



Git mediante terminal
---------------------

SSH keys (para trabajar en remoto sin que pida credenciales - se necesita key pública en github o bitbucket, y la pública y privada en el pc)

https://help.github.com/articles/generating-ssh-keys

Se necesitan ficheros id_rsa (el pub contiene la clave pública) en .ssh del home

Crear directorio .ssh en el home
Dentro del ese directorio:
$ ssh-keygen -t rsa -C "email@miemail.com"
Creamos clave pública/privada de tipo rsa (se crean dos ficheros id_rsa e id_rsa.pub -pública)
Copiar contenido de id_rsa.pub y pegar en GitHub (apartado SSH keys, en Title poner nombre de tu ordenador)

$ ssh -T git@github.com
Para acceder a GitHub


Al trabajar con certificados auto-firmados (no intenta verifcar el certificado SSL) hay que definir la variable de entorno:
export GIT_SSL_NO_VERIFY=true
Se puede poner en el profile del equipo.


Para iniciar un repositorio tenemos 2 alternatvas. Crearlo desde cero o clonarlo desde un remoto.

Clonar repositorio remoto
Clonar el repositorio remoto lo descargará en la carpeta actual y configurará automáticamente el remoto como su origin.
Navegar hasta la carpeta en la que se va a poner el repositorio y ejecutar git clone.
Se puede ver una lista de los repositorios disponibles en https://intranet.corenetworks.es/gitweb
$ cd /home/user/my_projects
$ git clone https://intranet.corenetworks.es/gitweb/gc.git
Esto creará una carpeta llamada my_repo con el proyecto.

Crear repositorio
Navegar hasta el destno en el que estará el repositorio y ejecutar git init
$ cd /home/user/my_projects/my_repo
$ git init
Si va a ser un repositorio compartdo, añadir --shared
$ git init --shared
Para añadir un remoto. Se puede ver una lista de los repositorios disponibles en
https://intranet.corenetworks.es/gitweb
$ git remote add origin https://intranet.corenetworks.es/gitweb/gc.git

Flujo de trabajo con Git
Una vez está creado el repositorio el comando git status mostrará el estado del mismo.
$ git status
Éste será el fujo básico para trabajar con el repositorio:
WorkingDirectory --[git add]--> StagingArea --[git commit]--> Repository

El working directory o directorio de trabajo es la carpeta en la que tenemos nuestros archivos.
Primero pasaremos estos al stage. Una vez estén en el stage, podremos hacer commit al repositorio.

$ git add <archivos>
Añade archivos y/o carpetas al stage. Permite uso de expresiones regulares.
Ej. $ git add '*.txt'

$ git reset <archivos> Elimina archivos y/o carpetas del stage. NO BORRA ARCHIVOS DEL DIRECTORIO DE TRABAJO.

$ git commit -a -m “texto” Ejecuta commit al repositorio con los archivos en el stage.
-m permite añadir un mensaje al commit.
-a guarda registro de archivos eliminados del directorio de trabajo, eliminándolos del índice.

$ git checkout -- <archivo> Restaura archivo o carpeta a la últma versión en commit.

$git push -u origin master Manda a la rama master en el origin el estado actual del repositorio.
-u es opcional. Sirve para recordar los parámetros, así la próxima vez sólo hay que escribir git push

$ git pull <origin> <rama> Incorpora cambios hechos en el repositorio remoto a mi repositorio local

$ git diff Muestra cambios entre el entorno de trabajo y el índice.

$ git diff -- cached Muestra cambios entre el entorno de trabajo y el índice.

$ git diff HEAD Muestra diferencias entre el directorio de trabajo y el último commit

Trabajo en ramas
$ git branch <nombre_rama> Crea una rama a partr de la rama actual

$ git checkout <nombre_rama> Cambia a la rama especifcada

$ git merge <nombre_rama> Une rama especifcada a la rama actual.
NOTA. Para hacer merge a la rama master hay que cambiar a la rama master primero.
$ git checkout master
$ git merge mi_rama


~~~~~~~~~~~~~~~~~~~~~~~~~~~~ñ

Crear directorio con contenido.
$ git init ------ crear nuevo repositorio en la carpeta actual (se crea .git)
$ git status ----- chequear estado del repositorio

Guardar fichero nuevo
$ git add file.txt
$ git commit -m "initial comment"

Guardar cambios de fichero existente
$ git commit -am "new comment" (hace add y commit)


$ git log  ---- historico de cambios

$ git checkout hash  ----- volver a version

###############################

Uso de git por línea de comandos o por GUI

Para guardar una versión de un fichero (staged)
$ git add nombre_fichero
Hacer commit
$ git commit -m "comentario" (-m --- message)
Ver histórico
$ git log

Para excluir ficheros:
crear .gitignore y escribir el nombre los ficheros a excluir (uno por línea)
El fichero .gitignore debe ser commiteado


#########

$ git add .  -------  guarda todo lo de la carpeta actual (recursivamente, excepto las carpetas vacías)
$ git add folder ----- guarda todo lo de la carpeta folder (recursivamente)

REMOVE:
$ git rm file --> queda en stage => commit
$ rm file --> queda en local => $ git add -u ---> queda en stage => commit

MOVE
$ git mv file_src destino --> queda en stage => commit
$ mv file_src destino --> queda en local => $ git add -u ---> queda en stage => commit

########

$ git revert hash  ---- abre editor para escribir comentario
$ git reset hash  --- no comentario, no queda en stage (habrá que hacer add y commit)
$ git reset --soft hash  ---- idem que lo anterior, pero queda en stage (habrá que hacer commit)
$ git reset --hard hash ------ borra todo hasta lo especificado (peligroso)


REPOSITORIO REMOTO (github / Bitbucket - permite crear proy. privados)
Repositorio local

github
------

login y crear repositorio
crear repo local con: $ git clone https://github.com/... (dirección del repo de github)
Hacer modificaciones y subir a local (add, commit)
Subir a remoto: $ git push (pedirá credenciales username y pwd)

Si otro hace cambios y lo sube a remoto (o hacemos cambios directamente en github) los replicamos en local con:
$ git pull

Bitbucket
---------

Partimos de un repo local
login y crear repositorio
Ir al directorio del repo local
$ git remote add origin https://agv9@bitbucket.org/... (enlaza el repo local al remoto. Con git clone se ejecuta automáticamente el git remote)
$ git push -u origin --all # pushes up the repo and its refs for the first time
$ git push -u origin --tags # pushes up any tags



BRANCHES - línea independiente de desarrollo
master - rama ppal (se crea automáticamente)
$ git branch ---- lista ramas
$ git branch nombre_rama  -------- crea rama
$ git checkout nombre_rama ------- cambia a rama especificada

$ git checkout -b nombre_rama ------ crea rama y cambia a esa rama

merge (automático o manual)
AUTOMATICO (merge de una rama secundaria a la ppal -master)
$ git checkout master ---- ir a master
$ git merge nombre_rama ---- se especifica la rama con la que quiero hacer merge y se abre editor para poner comentario (la rama especificada permanece sin cambios, la rama master contiene los cambios procedentes de la rama secundaria)
se combinan los commits de la rama especificada con los de la rama actual y los deja en la rama actual.
MANUAL
Se produce cuando git no sabe como combinar contenidos (conflictos)
<<<<<<<< HEAD
...contenido de la rama actual
========
...contenido de la rama a unir
>>>>>>>> dev
Eliminaremos lo que no queremos, guardamos, add y commit

BRANCHES y REMOTES

$ git push (si estamos en master, se envia a master remoto. Si no estamos en master da error: hay que poner $ git push -u [--set-upstream] origin nombre_rama --- después de esto ya puedo hacer $ git push sin que de error)
$ git push origin master (origin es el alias por defecto del repo remoto)
$ git push origin --all (git envia los cambios de todas las ramas locales a las ramas remotas con el mismo nombre)
$ git push origin master


-----------------------------------

Putting your existing work on GitHub

1. Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub.

2. Open Terminal (for Mac and Linux users) or the command prompt (for Windows users).

3. Change the current working directory to your local project.

4. Initialize the local directory as a Git repository.

git init

5. Add the files in your new local repository. This stages them for the first commit.

git add .
# Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.


6. Commit the files that you've staged in your local repository.

git commit -m "First commit"
# Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.
Copy remote repository URL field

7. At the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.

8. In Terminal, add the URL for the remote repository where your local repository will be pushed.

git remote add origin remote repository URL
# Sets the new remote
git remote -v
# Verifies the new remote URL

9. Push the changes in your local repository to GitHub.

git push origin master
# Pushes the changes in your local repository up to the remote repository you specified as the origin



{~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

Git mediante NetBeans
---------------------
Para más información: https://netbeans.org/kb/docs/ide/git.html

Pluging de git: disponible desde las versiones 6.7 de netbeans.

Configuración básica de netbeans
Team → Repositorio → Open Confguration
Poner los valores que excluyan la verifcación de SSL.
Añadir al fichero de configuración la directiva de SSL en el apartado de http
Con esto ya podemos lanzar las operaciones de clone, push, ...

Subir un proyecto:
Team → Remote → Push (seleccionar un fichero con extensión .git creado vía ssh).

Bajar un proyecto:
Team → Clone e insertar valores.


Git en servidor remoto
----------------------
El repositorio remoto estará ubicado en una url de donde cuelgan el resto de repositorios. Ésta ubicación se puede abrir a través del navegador.
Para añadir usuario al acceso web:

$ htdigest /etc/apache2/.gitpassw “Repositorio de Git” <usuario> 
Añadir un usuario al acceso web.

$ git init --bare --shared /var/www/html/git/nombre.git
Para crear un repositorio nuevo


Enlaces de interés
------------------
Tutorial interactivo de Git (curso de iniciación gratuito de la página CodeSchool)
htps://try.github.io

Git Pro Book (la biblia de Git. Se puede consultar online o descargar)
htps://git-scm.com/book/en/v2

